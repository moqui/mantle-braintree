<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-3.xsd">

    <service verb="authorize" noun="Payment" type="script"
            location="component://mantle-braintree/service/mantle/braintree/script/Authorize.groovy">
        <implements service="mantle.account.PaymentServices.authorize#Payment"/>
    </service>

    <service verb="capture" noun="Payment" type="script"
            location="component://mantle-braintree/service/mantle/braintree/script/Capture.groovy">
        <implements service="mantle.account.PaymentServices.capture#Payment"/>
    </service>
    <service verb="release" noun="Payment" type="script"
            location="component://mantle-braintree/service/mantle/braintree/script/Release.groovy">
        <implements service="mantle.account.PaymentServices.release#Payment"/>
    </service>
    <service verb="refund" noun="Payment" type="script"
            location="component://mantle-braintree/service/mantle/braintree/script/Refund.groovy">
        <implements service="mantle.account.PaymentServices.refund#Payment"/>
    </service>


    <service verb="get" noun="PaymentGatewayConfig">
        <in-parameters>
            <parameter name="paymentMethod" type="EntityValue"/>
            <parameter name="paymentGatewayConfigId"/>
        </in-parameters>
        <out-parameters><parameter name="paymentGatewayConfigId"/></out-parameters>
        <actions>
            <!-- see if associated PaymentMethod has a paymentGatewayConfigId -->
            <if condition="!paymentGatewayConfigId"><set field="paymentGatewayConfigId" from="paymentMethod?.paymentGatewayConfigId"/></if>
            <!-- then try from PartySetting VaultPaymentGatewayConfigId if PaymentMethod.ownerPartyId is owned by an internal org (Party.ownerPartyId) -->
            <if condition="!paymentGatewayConfigId &amp;&amp; paymentMethod?.ownerPartyId">
                <set field="ownerParty" from="paymentMethod.ownerParty"/>
                <if condition="ownerParty?.ownerPartyId">
                    <service-call name="mantle.party.PartyServices.get#PartySettingValue" out-map="ptySettingOut"
                            in-map="[partyId:ownerParty.ownerPartyId, partySettingTypeId:'VaultPaymentGatewayConfigId']"/>
                    <set field="paymentGatewayConfigId" from="ptySettingOut?.settingValue"/>
                </if>
            </if>
            <!-- then try from BraintreeVaultPaymentGatewayConfigId preference -->
            <if condition="!paymentGatewayConfigId">
                <set field="paymentGatewayConfigId" from="ec.user.getPreference('BraintreeVaultPaymentGatewayConfigId')"/></if>
        </actions>
    </service>

    <service verb="create" noun="PaymentMethodFromNonce">
        <in-parameters>
            <parameter name="partyId" required="true"/>
            <parameter name="nonce" required="true"/>
            <parameter name="productStoreId"><description>Optional but recommended to lookup settings</description></parameter>
            <parameter name="paymentId"><description>If specified will associate PaymentGatewayResponse with the Payment</description></parameter>
            <parameter name="paymentGatewayConfigId"><description>If not specified gets from BraintreeVaultPaymentGatewayConfigId user preference</description></parameter>
            <parameter name="postalContactMechId"/>
            <parameter name="telecomContactMechId"/>
            <parameter name="emailContactMechId"/>
        </in-parameters>
        <out-parameters><parameter name="paymentMethodId"/></out-parameters>
        <actions>
            <if condition="!paymentGatewayConfigId &amp;&amp; productStoreId">
                <!-- TODO: support store level setting, and other store settings? -->

                <!-- see if store org has gateway setting -->
                <entity-find-one entity-name="mantle.product.store.ProductStore" value-field="productStore"/>
                <if condition="productStore?.organizationPartyId">
                    <service-call name="mantle.party.PartyServices.get#PartySettingValue" out-map="ptySettingOut"
                            in-map="[partyId:productStore.organizationPartyId, partySettingTypeId:'VaultPaymentGatewayConfigId']"/>
                    <set field="paymentGatewayConfigId" from="ptySettingOut?.settingValue"/>
                </if>
            </if>
            <!-- if none specified get from BraintreeVaultPaymentGatewayConfigId preference -->
            <if condition="!paymentGatewayConfigId">
                <set field="paymentGatewayConfigId" from="ec.user.getPreference('BraintreeVaultPaymentGatewayConfigId')"/></if>
            <if condition="!paymentGatewayConfigId"><log level="warn" message="In create#PaymentMethodFromNonce no paymentGatewayConfigId specified or BraintreeVaultPaymentGatewayConfigId user preference found"/><return/></if>
            <entity-find-one entity-name="braintree.PaymentGatewayBraintree" value-field="pgan"/>
            <if condition="pgan == null">
                <return error="true" message="Could not save Braintree payment method, no PaymentGatewayBraintree found with ID ${paymentGatewayConfigId}"/></if>

            <entity-find-one entity-name="mantle.party.PartyDetail" value-field="partyDetail"><field-map field-name="partyId"/></entity-find-one>

            <!-- get billing contact info, use for any not set on PaymentMethod -->
            <set field="contactsContext" from="[partyId:partyId]"/>
            <if condition="!postalContactMechId"><set field="contactsContext.postalContactMechPurposeId" value="PostalBilling"/></if>
            <if condition="!telecomContactMechId"><set field="contactsContext.telecomContactMechPurposeId" value="PhoneBilling"/></if>
            <if condition="!emailContactMechId"><set field="contactsContext.emailContactMechPurposeId" value="EmailBilling"/></if>
            <service-call name="mantle.party.ContactServices.get#PartyContactInfo" out-map="billingContactInfo"
                    in-map="context + contactsContext"/>
            <set field="postalAddress" from="billingContactInfo.postalAddress"/>
            <set field="stateProvinceGeo" from="billingContactInfo.postalAddressStateGeo"/>
            <set field="telecomNumber" from="billingContactInfo.telecomNumber"/>
            <set field="phone" from="(telecomNumber?.countryCode ? (telecomNumber.countryCode + '-') : '') + (telecomNumber?.areaCode ? (telecomNumber.areaCode + '-') : '') + telecomNumber?.contactNumber"/>
            <set field="emailContactMech" from="billingContactInfo.emailContactMech"/>

            <script><![CDATA[
            try {
                def gateway = mantle.braintree.BraintreeGatewayFactory.getInstance((String) paymentGatewayConfigId, ec)

                // see if the customer exists, if not create one
                def customer = null
                try { customer = gateway.customer().find((String) partyId) }
                catch (com.braintreegateway.exceptions.NotFoundException nfe) { customer = null }

                com.braintreegateway.CustomerRequest custRequest = null
                com.braintreegateway.PaymentMethodRequest pmRequest = null
                com.braintreegateway.AddressRequest billAddr = null
                if (customer == null) {
                    custRequest = new com.braintreegateway.CustomerRequest().id((String) partyId)
                            .firstName((String) partyDetail.firstName).lastName((String) partyDetail.lastName)
                            .company((String) partyDetail.organizationName)
                    if (emailContactMech?.infoString) custRequest.email((String) emailContactMech.infoString)
                    if (phone) custRequest.phone((String) phone)

                    custRequest.paymentMethodNonce((String) nonce)
                    billAddr = custRequest.creditCard().billingAddress()
                } else {
                    pmRequest = new com.braintreegateway.PaymentMethodRequest().customerId((String) partyId)
                            .paymentMethodNonce((String) nonce)
                    billAddr = pmRequest.billingAddress()
                }

                if (postalAddress != null) {
                    billAddr.firstName((String) partyDetail.firstName).lastName((String) partyDetail.lastName)
                            .streetAddress((String) postalAddress.address1).locality((String) postalAddress.city)
                            .region((String) stateProvinceGeo?.geoCodeAlpha2 ?: stateProvinceGeo?.geoCodeAlpha3)
                            .postalCode("${postalAddress.postalCode}${postalAddress.postalCodeExt ? '-' + postalAddress.postalCodeExt : ''}")
                            .countryCodeAlpha3((String) postalAddress.countryGeoId)

                    if (partyDetail?.organizationName) billAddr.company((String) partyDetail.organizationName)

                    if (postalAddress.address2 || postalAddress.unitNumber)
                        billAddr.extendedAddress("${postalAddress.address2 ?: ''}${postalAddress.address2 && postalAddress.unitNumber ? ' ' : ''}${postalAddress.unitNumber ? '#' + postalAddress.unitNumber : ''}")
                    billAddr.done()
                }

                def gatewayResult = null
                def newPaymentMethod = null
                if (custRequest != null) {
                    gatewayResult = gateway.customer().create(custRequest)
                    List paymentMethods = gatewayResult.target?.paymentMethods
                    if (paymentMethods) newPaymentMethod = paymentMethods.get(0)
                } else {
                    gatewayResult = gateway.paymentMethod().create(pmRequest)
                    newPaymentMethod = gatewayResult.target
                }
                String reasonMessage = gatewayResult.message
                if (reasonMessage != null && reasonMessage.length() > 255) reasonMessage = reasonMessage.substring(0, 255)

                if (gatewayResult.isSuccess()) {
                    Map payMethMap = [gatewayCimId:newPaymentMethod.token, paymentGatewayConfigId:paymentGatewayConfigId,
                            imageUrl:newPaymentMethod.imageUrl, ownerPartyId:partyId, postalContactMechId:postalContactMechId,
                            telecomContactMechId:telecomContactMechId, emailContactMechId:emailContactMechId]
                    if (newPaymentMethod instanceof com.braintreegateway.CreditCard) {
                        payMethMap.paymentMethodTypeEnumId = 'PmtCreditCard'
                        payMethMap.description = "${newPaymentMethod.cardType} ${newPaymentMethod.maskedNumber}"

                        Map pmResult = ec.service.sync().name("create#mantle.account.method.PaymentMethod").parameters(payMethMap).call()
                        paymentMethodId = pmResult.paymentMethodId

                        // NOTE: using expirationMonth and expirationYear as expirationDate is MMYYYY
                        Map ccCreateMap = [paymentMethodId:paymentMethodId, cardNumber:newPaymentMethod.maskedNumber,
                                expireDate:(newPaymentMethod.expirationMonth + '/' + newPaymentMethod.expirationYear)]
                        if (mantle.braintree.BraintreeGatewayFactory.ccTypes.containsKey(newPaymentMethod.cardType))
                            ccCreateMap.creditCardTypeEnumId = mantle.braintree.BraintreeGatewayFactory.ccTypes.get(newPaymentMethod.cardType)
                        ec.service.sync().name("create#mantle.account.method.CreditCard").parameters(ccCreateMap).call()
                    } else if (newPaymentMethod instanceof com.braintreegateway.PayPalAccount) {

                        payMethMap.paymentMethodTypeEnumId = 'PmtPayPalAccount'
                        payMethMap.description = "PayPal ${newPaymentMethod.email}"

                        Map pmResult = ec.service.sync().name("create#mantle.account.method.PaymentMethod").parameters(payMethMap).call()
                        paymentMethodId = pmResult.paymentMethodId

                        ec.service.sync().name("create#mantle.account.method.PayPalAccount").parameters([
                                paymentMethodId:paymentMethodId, expressCheckoutToken:newPaymentMethod.token,
                                correlationId:newPaymentMethod.billingAgreementId]).call()
                        // NOTE: any way to get/handle transactionId?
                    }
                    // TODO: support other payment method types over time, see: https://developers.braintreepayments.com/reference/response/payment-method/java

                    ec.service.sync().name("create#mantle.account.method.PaymentGatewayResponse").parameters([
                            paymentGatewayConfigId:paymentGatewayConfigId, paymentOperationEnumId:"PgoStoreCim",
                            paymentMethodId:paymentMethodId, paymentId:paymentId, transactionDate:ec.user.nowTimestamp,
                            reasonMessage:reasonMessage, resultSuccess:'Y', resultError:'N']).call()
                } else {
                    /*
                     * Card verification should be enabled on Braintree otherwise this object does not
                     * present in the result. We check verification result first and proceed with other
                     * errors only if it has status VERIFIED.
                     */
                    com.braintreegateway.CreditCardVerification cardVerification = gatewayResult.creditCardVerification
                    if (cardVerification) {
                        String errMsg;
                        com.braintreegateway.CreditCard creditCard = cardVerification.creditCard
                        String status = cardVerification.status.toString()
                        if (status != 'VERIFIED') {
                            String reasonCode
                            String resultError = 'N'
                            String resultDeclined = 'Y'
                            if ("PROCESSOR_DECLINED" == status) {
                                reasonCode = cardVerification.processorResponseCode
                                reasonMessage = cardVerification.processorResponseText
                                errMsg = "Payment method was declined (not verified) for the card ${creditCard?.cardType} ending ${creditCard?.last4}"
                            } else if ("GATEWAY_REJECTED" == status) {
                                errMsg = "Payment method is rejected (not verified) for the card ${creditCard?.cardType} ending ${creditCard?.last4}"
                                reasonMessage = "Rejected by gateway: " + cardVerification.gatewayRejectionReason.toString()
                            } else {
                                // status == FAILED
                                errMsg = "Credit card verification is failed (not verified) for the card ${creditCard?.cardType} ending ${creditCard?.last4}"
                                resultError = 'Y'
                                resultDeclined = 'N'
                            }

                            ec.service.sync().name("create#mantle.account.method.PaymentGatewayResponse").parameters([
                                    paymentGatewayConfigId:paymentGatewayConfigId, paymentOperationEnumId:"PgoStoreCim",
                                    paymentId:paymentId, transactionDate:ec.user.nowTimestamp, reasonCode:reasonCode,
                                    reasonMessage:reasonMessage, resultSuccess:'N', resultError:resultError, resultDeclined:resultDeclined]).call()

                            ec.logger.info(reasonMessage)
                            ec.message.addPublic(errMsg, "danger")
                            return;
                        }
                    }

                    List validationErrors = gatewayResult.errors.allDeepValidationErrors
                    String reasonCode = validationErrors ? validationErrors.get(0).code.toString() : null
                    ec.service.sync().name("create#mantle.account.method.PaymentGatewayResponse").parameters([
                            paymentGatewayConfigId:paymentGatewayConfigId, paymentOperationEnumId:"PgoStoreCim",
                            paymentId:paymentId, transactionDate:ec.user.nowTimestamp, reasonCode:reasonCode,
                            reasonMessage:reasonMessage, resultSuccess:'N', resultError:'Y']).call()

                    if (validationErrors) for (def error in validationErrors)
                        ec.message.addValidationError(null, error.attribute, null, "${error.message} [${error.code}]", null)
                }
            } catch (Exception ge) {
                ec.message.addError("Braintree exception: ${ge.toString()}")
            }
            ]]></script>
        </actions>
    </service>
    <service verb="store" noun="CustomerPaymentMethod" authenticate="anonymous-all">
        <in-parameters>
            <parameter name="paymentMethodId" required="true"/>
            <parameter name="validateSecurityCode"/>
            <parameter name="paymentId"/>
            <parameter name="paymentGatewayConfigId"><description>If not specified gets from PaymentMethod or BraintreeVaultPaymentGatewayConfigId user preference</description></parameter>
        </in-parameters>
        <!-- see:
        https://developers.braintreepayments.com/reference/request/customer/create/java
        https://developers.braintreepayments.com/reference/request/credit-card/create/java
        -->
        <actions>
            <entity-find-one entity-name="mantle.account.method.CreditCard" value-field="creditCard"/>
            <!-- for now we are only supporting CreditCard, though we could also support BankAccount with Authorize.Net CIM -->
            <if condition="creditCard == null"><return/></if>
            <entity-find-one entity-name="mantle.account.method.PaymentMethod" value-field="paymentMethod" for-update="true"/>
            <set field="cvvCode" from="validateSecurityCode ?: creditCard.cardSecurityCode"/>

            <service-call name="mantle.braintree.BraintreeServices.get#PaymentGatewayConfig" in-map="context" out-map="context"/>
            <if condition="!paymentGatewayConfigId"><log level="warn" message="In store#CustomerPaymentMethod no paymentGatewayConfigId specified or BraintreeVaultPaymentGatewayConfigId user preference found"/><return/></if>

            <entity-find-one entity-name="braintree.PaymentGatewayBraintree" value-field="pgan"/>
            <if condition="pgan == null">
                <!-- this will happen regularly when PaymentMethod.paymentGatewayConfigId is for another gateway -->
                <log message="Not saving payment method ${paymentMethodId} with Braintree, no PaymentGatewayBraintree found with ID ${paymentGatewayConfigId}"/>
                <return/>
            </if>

            <entity-find-one entity-name="mantle.party.PartyDetail" value-field="partyDetail">
                <field-map field-name="partyId" from="paymentMethod.ownerPartyId"/></entity-find-one>

            <!-- get billing contact info, use for any not set on PaymentMethod -->
            <service-call name="mantle.party.ContactServices.get#PartyContactInfo" out-map="billingContactInfo"
                    in-map="[partyId:paymentMethod.ownerPartyId, postalContactMechPurposeId:'PostalBilling',
                            telecomContactMechPurposeId:'PhoneBilling', emailContactMechPurposeId:'EmailBilling']"/>

            <set field="postalAddress" from="paymentMethod.postalAddress"/>
            <if condition="postalAddress == null">
                <set field="postalAddress" from="billingContactInfo.postalAddress"/>
                <set field="stateProvinceGeo" from="billingContactInfo.postalAddressStateGeo"/>
            </if>
            <if condition="postalAddress == null"><return message="No address associated with credit card ${paymentMethodId}, not saving CIM record."/></if>
            <set field="stateProvinceGeo" from="stateProvinceGeo != null ? stateProvinceGeo : postalAddress.stateProvinceGeo"/>

            <set field="telecomNumber" from="paymentMethod.telecomNumber"/>
            <if condition="telecomNumber == null"><set field="telecomNumber" from="billingContactInfo.telecomNumber"/></if>
            <set field="phone" from="(telecomNumber?.countryCode ? (telecomNumber.countryCode + '-') : '') + (telecomNumber?.areaCode ? (telecomNumber.areaCode + '-') : '') + telecomNumber?.contactNumber"/>
            <set field="emailContactMech" from="paymentMethod.'Email#mantle.party.contact.ContactMech'"/>
            <if condition="emailContactMech == null"><set field="emailContactMech" from="billingContactInfo.emailContactMech"/></if>

            <!-- credit card data -->
            <script><![CDATA[
            try {
                // correct masking if needed, use only 'X' (for Braintree is number optional for update or needs masking?)
                String cardNumber = creditCard.cardNumber?.replaceAll(/\D/, 'X')
                String cardholderName = "${paymentMethod.firstNameOnAccount ?: partyDetail?.firstName ?: ''} ${paymentMethod.lastNameOnAccount ?: partyDetail?.lastName ?: ''}"

                def gateway = mantle.braintree.BraintreeGatewayFactory.getInstance((String) paymentGatewayConfigId, ec)

                // see if the customer exists, if not create one
                def customer = null
                try { customer = gateway.customer().find((String) paymentMethod.ownerPartyId) }
                catch (com.braintreegateway.exceptions.NotFoundException nfe) { customer = null }

                com.braintreegateway.CustomerRequest custRequest = null
                com.braintreegateway.CreditCardRequest ccRequest = null
                if (customer == null) {
                    custRequest = new com.braintreegateway.CustomerRequest().id((String) paymentMethod.ownerPartyId)
                            .firstName((String) paymentMethod.firstNameOnAccount ?: partyDetail?.firstName)
                            .lastName((String) paymentMethod.lastNameOnAccount ?: partyDetail?.lastName)
                            .company((String) paymentMethod.companyNameOnAccount ?: partyDetail?.organizationName)
                    if (emailContactMech?.infoString) custRequest.email((String) emailContactMech.infoString)
                    if (phone) custRequest.phone((String) phone)

                    // NOTE: for some reason passing customerId here causes a Braintree Authorization Exception: .customerId((String) paymentMethod.ownerPartyId)
                    ccRequest = custRequest.creditCard().cardholderName(cardholderName)
                            .expirationDate((String) creditCard.expireDate).number((String) creditCard.cardNumber)
                    if (cvvCode) ccRequest.cvv((String) cvvCode)
                } else {
                    // create or update the credit card
                    ccRequest = new com.braintreegateway.CreditCardRequest().customerId((String) paymentMethod.ownerPartyId)
                            .cardholderName((String) cardholderName).expirationDate((String) creditCard.expireDate)
                    if (!paymentMethod.gatewayCimId) ccRequest.number((String) creditCard.cardNumber)

                    if (cvvCode) ccRequest.cvv((String) cvvCode)
                }

                if (postalAddress != null) {
                    def billAddr = ccRequest.billingAddress()
                            .firstName(paymentMethod.firstNameOnAccount ?: partyDetail?.firstName ?: '')
                            .lastName(paymentMethod.lastNameOnAccount ?: partyDetail?.lastName ?: '')
                            .streetAddress((String) postalAddress.address1).locality((String) postalAddress.city)
                            .region((String) stateProvinceGeo?.geoCodeAlpha2 ?: stateProvinceGeo?.geoCodeAlpha3)
                            .postalCode("${postalAddress.postalCode}${postalAddress.postalCodeExt ? '-' + postalAddress.postalCodeExt : ''}")
                            .countryCodeAlpha3((String) postalAddress.countryGeoId)

                    if (paymentMethod.companyNameOnAccount) billAddr.company((String) paymentMethod.companyNameOnAccount)
                    else if (partyDetail?.organizationName) billAddr.company((String) partyDetail.organizationName)

                    if (postalAddress.address2 || postalAddress.unitNumber)
                        billAddr.extendedAddress("${postalAddress.address2 ?: ''}${postalAddress.address2 && postalAddress.unitNumber ? ' ' : ''}${postalAddress.unitNumber ? '#' + postalAddress.unitNumber : ''}")
                    billAddr.done()
                }

                def gatewayResult = null
                def newCreditCard = null

                // TODO: remove these to disable Braintree FINE logging, back to INFO
                java.util.logging.Logger.getLogger("Braintree").setLevel(java.util.logging.Level.ALL)
                if (customer == null) {
                    ec.logger.warn("Braintree customer().create() for: ${custRequest}")
                    gatewayResult = gateway.customer().create(custRequest)
                    List creditCards = gatewayResult.target?.creditCards
                    if (creditCards) newCreditCard = creditCards.get(0)
                } else {
                    if (paymentMethod.gatewayCimId) {
                        gatewayResult = gateway.creditCard().update((String) paymentMethod.gatewayCimId, ccRequest)
                    } else {
                        gatewayResult = gateway.creditCard().create(ccRequest)
                        newCreditCard = gatewayResult.target
                    }
                }
                String reasonMessage = gatewayResult.message
                if (reasonMessage != null && reasonMessage.length() > 255) reasonMessage = reasonMessage.substring(0, 255)

                if (gatewayResult.isSuccess()) {
                    ec.service.sync().name("create#mantle.account.method.PaymentGatewayResponse").parameters([
                            paymentGatewayConfigId:paymentGatewayConfigId, paymentOperationEnumId:"PgoStoreCim",
                            paymentMethodId:paymentMethodId, paymentId:paymentId, transactionDate:ec.user.nowTimestamp,
                            reasonMessage:reasonMessage, resultSuccess:'Y', resultError:'N']).call()

                    if (newCreditCard?.token) {
                        paymentMethod.gatewayCimId = newCreditCard.token
                        paymentMethod.paymentGatewayConfigId = paymentGatewayConfigId
                        paymentMethod.imageUrl = newCreditCard.imageUrl
                        if (!paymentMethod.description) paymentMethod.description = "${newCreditCard.cardType} ${newCreditCard.maskedNumber}"
                        paymentMethod.update()

                        if (mantle.braintree.BraintreeGatewayFactory.ccTypes.containsKey(newCreditCard.cardType))
                            creditCard.creditCardTypeEnumId = mantle.braintree.BraintreeGatewayFactory.ccTypes.get(newCreditCard.cardType)
                        creditCard.cardSecurityCode = null
                        creditCard.cardNumber = newCreditCard.maskedNumber
                        creditCard.update()
                    }
                } else {
                    /*
                     * Card verification should be enabled on Braintree otherwise this object does not
                     * present in the result. We check verification result first and proceed with other
                     * errors only if it has status VERIFIED.
                     */
                    com.braintreegateway.CreditCardVerification cardVerification = gatewayResult.creditCardVerification
                    if (cardVerification) {
                        com.braintreegateway.CreditCard creditCard = cardVerification.creditCard
                        String status = cardVerification.status.toString()
                        if (status != 'VERIFIED') {
                            String reasonCode
                            String resultError = 'N'
                            String resultDeclined = 'Y'
                            if ("PROCESSOR_DECLINED" == status) {
                                reasonCode = cardVerification.processorResponseCode
                                reasonMessage = cardVerification.processorResponseText
                            } else if ("GATEWAY_REJECTED" == status) {
                                reasonMessage = "Rejected by gateway: " + cardVerification.gatewayRejectionReason.toString()
                            } else {
                                // status == FAILED
                                resultError = 'Y'
                                resultDeclined = 'N'
                                reasonMessage = "Payment method is failed for unknown reason"
                            }

                            ec.service.sync().name("create#mantle.account.method.PaymentGatewayResponse").parameters([
                                    paymentGatewayConfigId:paymentGatewayConfigId, paymentOperationEnumId:"PgoStoreCim",
                                    paymentId:paymentId,transactionDate:ec.user.nowTimestamp, reasonCode:reasonCode,
                                    reasonMessage:reasonMessage, resultSuccess:'N', resultError:resultError, resultDeclined:resultDeclined]).call()

                            ec.message.addError(reasonMessage)
                            ec.message.addPublic("Credit card has not been updated due to a verification issue", "danger");

                            return;
                        }
                    }

                    List validationErrors = gatewayResult.errors.allDeepValidationErrors
                    String reasonCode = validationErrors ? validationErrors.get(0).code.toString() : null
                    ec.service.sync().name("create#mantle.account.method.PaymentGatewayResponse").requireNewTransaction(true).parameters([
                            paymentGatewayConfigId:paymentGatewayConfigId, paymentOperationEnumId:"PgoStoreCim",
                            paymentMethodId:paymentMethodId, paymentId:paymentId, transactionDate:ec.user.nowTimestamp,
                            reasonCode:reasonCode, reasonMessage:reasonMessage, resultSuccess:'N', resultError:'Y']).call()

                    if (validationErrors) for (def error in validationErrors)
                        ec.message.addValidationError(null, error.attribute, null, "${error.message} [${error.code}]", null)
                }
            } catch (Exception ge) {
                ec.message.addError("Braintree exception: ${ge.toString()}")
            }
            ]]></script>
        </actions>
    </service>

    <service verb="delete" noun="CustomerPaymentMethod">
        <in-parameters><parameter name="paymentMethodId"/></in-parameters>
        <actions>
            <entity-find-one entity-name="mantle.account.method.PaymentMethod" value-field="paymentMethod" for-update="true"/>

            <service-call name="mantle.braintree.BraintreeServices.get#PaymentGatewayConfig" in-map="context" out-map="context"/>
            <if condition="!paymentGatewayConfigId"><log level="warn" message="In delete#CustomerPaymentMethod no paymentGatewayConfigId specified or BraintreeVaultPaymentGatewayConfigId user preference found"/><return/></if>

            <entity-find-one entity-name="braintree.PaymentGatewayBraintree" value-field="pgan"/>
            <if condition="pgan == null">
                <!-- this will happen regularly when PaymentMethod.paymentGatewayConfigId is for another gateway -->
                <log message="Not deleting payment method ${paymentMethodId} from Braintree, no PaymentGatewayBraintree found with ID ${paymentGatewayConfigId}"/>
                <return/>
            </if>

            <script><![CDATA[
                if (paymentMethod.gatewayCimId) {
                    com.braintreegateway.BraintreeGateway gateway = mantle.braintree.BraintreeGatewayFactory.getInstance(paymentGatewayConfigId, ec)
                    def gatewayResult = gateway.paymentMethod().delete((String) paymentMethod.gatewayCimId)
                    String reasonMessage = gatewayResult.message
                    if (reasonMessage != null && reasonMessage.length() > 255) reasonMessage = reasonMessage.substring(0, 255)

                    if (gatewayResult.isSuccess()) {
                        ec.service.sync().name("create#mantle.account.method.PaymentGatewayResponse").parameters([
                                paymentGatewayConfigId:paymentGatewayConfigId, paymentOperationEnumId:"PgoStoreCim",
                                paymentMethodId:paymentMethodId, paymentId:paymentId, transactionDate:ec.user.nowTimestamp,
                                reasonMessage:reasonMessage, resultSuccess:'Y', resultError:'N']).call()

                        paymentMethod.gatewayCimId = null
                        paymentMethod.update()
                    } else {
                        List validationErrors = gatewayResult.errors.allDeepValidationErrors
                        String reasonCode = validationErrors ? validationErrors.get(0).code.toString() : null
                        ec.service.sync().name("create#mantle.account.method.PaymentGatewayResponse").parameters([
                                paymentGatewayConfigId:paymentGatewayConfigId, paymentOperationEnumId:"PgoStoreCim",
                                paymentMethodId:paymentMethodId, paymentId:paymentId, transactionDate:ec.user.nowTimestamp,
                                reasonCode:reasonCode, reasonMessage:reasonMessage, resultSuccess:'N', resultError:'Y']).call()

                        if (validationErrors) for (def error in validationErrors)
                            ec.message.addValidationError(null, error.attribute, null, "${error.message} [${error.code}]", null)
                    }
                }
            ]]></script>
        </actions>
    </service>
</services>
